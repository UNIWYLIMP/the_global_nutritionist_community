# Generated by Django 5.0.3 on 2024-09-18 03:21

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ContactUs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(default='', max_length=250, verbose_name='Email')),
                ('fullname', models.CharField(default='', max_length=250, verbose_name='Fullname')),
                ('subject', models.CharField(default='', max_length=250, verbose_name='Subject')),
                ('description', models.TextField(default='', max_length=2500, verbose_name='Description')),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'Contact Us',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=250, verbose_name='Event Name')),
                ('description', models.TextField(default='', verbose_name='Event Description')),
                ('event_link', models.URLField(default='', verbose_name='Event Link')),
                ('location', models.TextField(default='', verbose_name='Event Location')),
                ('donation_goal', models.PositiveIntegerField(default=1, verbose_name='Donation Goal')),
                ('date_new', models.TextField(default=0, verbose_name='Event Date')),
                ('images_count', models.PositiveIntegerField(default=0, verbose_name='Images Count')),
            ],
            options={
                'db_table': 'Events',
            },
        ),
        migrations.CreateModel(
            name='FileDump',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(blank=True, null=True, upload_to='fileDumps/', verbose_name='File')),
            ],
            options={
                'db_table': 'File Dumps',
            },
        ),
        migrations.CreateModel(
            name='ImageDump',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, upload_to='dumps/', verbose_name='Image')),
            ],
            options={
                'db_table': 'Image Dumps',
            },
        ),
        migrations.CreateModel(
            name='SponsorRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(default='', max_length=250, verbose_name='Email')),
                ('fullname', models.CharField(default='', max_length=250, verbose_name='Fullname')),
                ('contact', models.CharField(default='', max_length=250, verbose_name='Contact')),
                ('subject', models.CharField(default='', max_length=250, verbose_name='Subject')),
                ('description', models.TextField(default='', max_length=2500, verbose_name='Description')),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'Sponsor Request',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('username', models.CharField(max_length=250, unique=True, verbose_name='User Name')),
                ('fullname', models.CharField(default='', max_length=250, verbose_name='Full Name')),
                ('unique_code', models.CharField(default='', max_length=250, verbose_name='Unique Code')),
                ('profession', models.CharField(default='', max_length=250, verbose_name='Profession')),
                ('account_type', models.CharField(default='member', max_length=250, verbose_name='Account Type')),
                ('profile_pic', models.ImageField(blank=True, null=True, upload_to='profile_pic/', verbose_name='Profile Picture')),
                ('address', models.CharField(default='', max_length=250, verbose_name='User Address')),
                ('mobile', models.CharField(default='', max_length=50, verbose_name='User Mobile')),
                ('codex', models.CharField(default='', max_length=250, verbose_name='Codex')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'Profiles',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Blog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=250, verbose_name='Blog Name')),
                ('description', models.TextField(verbose_name='Blog Description')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('reads', models.PositiveIntegerField(default=0, verbose_name='Reads')),
                ('votes', models.PositiveIntegerField(default=0, verbose_name='Votes')),
                ('voted_users', models.ManyToManyField(related_name='voted_users_blog', to=settings.AUTH_USER_MODEL)),
                ('images', models.ManyToManyField(default=1, to='miniapp.imagedump')),
            ],
            options={
                'db_table': 'Blogs',
            },
        ),
        migrations.CreateModel(
            name='BlogReply',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField(default='', verbose_name='Comment')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('votes', models.PositiveIntegerField(default=0, verbose_name='Votes')),
                ('blog', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='miniapp.blog')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('voted_users', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='voted_users', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'Blog Replies',
            },
        ),
        migrations.CreateModel(
            name='CommunityTopic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('topic', models.TextField(default='', verbose_name='Topic')),
                ('insight', models.PositiveIntegerField(default=0, verbose_name='Insight')),
                ('votes', models.PositiveIntegerField(default=0, verbose_name='Votes')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('poster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='poster', to=settings.AUTH_USER_MODEL)),
                ('voted_users', models.ManyToManyField(related_name='community_voted_users', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'Community Topic',
            },
        ),
        migrations.CreateModel(
            name='CommunityTopicReply',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField(default='', verbose_name='Topic')),
                ('votes', models.PositiveIntegerField(default=0, verbose_name='Votes')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('insight', models.PositiveIntegerField(default=0, verbose_name='Insight')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='miniapp.communitytopic')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('voted_users', models.ManyToManyField(related_name='community_reply_voted_users', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'Community Topic Replies',
            },
        ),
        migrations.CreateModel(
            name='EventAttendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attendant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='miniapp.event')),
            ],
            options={
                'db_table': 'Event Attendance',
            },
        ),
        migrations.CreateModel(
            name='EventReply',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField(default='', verbose_name='Event Comment')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='miniapp.event')),
                ('poster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'Event Replies',
            },
        ),
        migrations.AddField(
            model_name='event',
            name='images',
            field=models.ManyToManyField(default=1, related_name='Event_Images', to='miniapp.imagedump'),
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=250, verbose_name='Resource Name')),
                ('description', models.TextField(verbose_name='Resource Description')),
                ('downloads', models.PositiveIntegerField(default=0, verbose_name='Downloads')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('images', models.ManyToManyField(default=1, to='miniapp.imagedump')),
                ('media', models.ManyToManyField(default=1, to='miniapp.filedump')),
            ],
            options={
                'db_table': 'Resources',
            },
        ),
    ]
